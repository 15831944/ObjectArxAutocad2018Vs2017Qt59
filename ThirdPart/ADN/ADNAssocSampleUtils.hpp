#pragma once

#include "AdnAssocConstraintAPI.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AdnAssocSampleUtils
{
public:
	AdnAssocSampleUtils(void);
	~AdnAssocSampleUtils(void);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static AcDbObjectId getConstraintGroup(
		const AcDbObjectId& spaceId,
		bool  createIfDoesNotExist);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getFullSubentPaths(
		const AcDbEntity *pEnt, 
		AcDb::SubentType subentType, 
		AcDbFullSubentPathArray &aPaths);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addConstrainedGeometry(
		AcDbFullSubentPathArray &aPaths,
		AcArray<AcConstrainedGeometry*> &pConsGeoms);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addGeomConstraint(
		const AcGeomConstraint::GeomConstraintType& typ, 
		AcDbFullSubentPathArray &aPaths);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addGeomConstraint(
		const AcGeomConstraint::GeomConstraintType& typ, 
		AcArray<AcConstrainedGeometry*> &pConsGeoms,
		const AcGePoint3dArray& points);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addGeomConstraint(
		const AcGeomConstraint::GeomConstraintType& constraintType, 
		AcDbFullSubentPathArray &aPaths,
		AcDbFullSubentPathArray &fixedGeom);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getClosestEdgeSubEntPath(
		const AcDbObjectId& entId, 
		const AcGePoint3d& entPt, 
		AcDbFullSubentPath &closestPath,
		double* pMinDist = NULL,
		AcGePoint3d* pClosestPt = NULL);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getClosestEdgeSubEntPathBref(
		const AcDbObjectId& brefId, 
		const AcGePoint3d& entPt, 
		AcDbFullSubentPath &closestPath,
		double* pMinDist = NULL);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getClosestVertexInfo(
		const AcDbObjectId& entId, 
		const AcDbFullSubentPath& edgeSubentId, 
		const AcGePoint3d& pt, 
		AcGePoint3d& closestVertexPos,
		AcDbFullSubentPath& closestVertexSubentPath);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getClosestVertexPos(
		const AcDbObjectId& entId, 
		const AcDbFullSubentPath& edgeSubentId, 
		const AcGePoint3d& pt, 
		AcGePoint3d& closestVertexPos);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getClosestVertexInfoBref(
		const AcDbObjectId& entId, 
		const AcDbFullSubentPath& edgeSubentId, 
		const AcGePoint3d& pt, 
		AcGePoint3d& closestVertexPos,
		AcDbFullSubentPath& closestVertexSubentPath);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static bool isEntityValidForConstraint(
		const AcDbObjectId& entId, 
		const AcGePoint3d& entPt, 
		AcGeomConstraint::GeomConstraintType type);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static AcGeCurve3d* getCurveForEdgeSubentity(
		const AcDbObjectId& entId, 
		const AcDbFullSubentPath& edgeSubent);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getValidVertexSubentities(
		const AcDbEntity* pEntity,
		const AcDbSubentId& edgeSubentId,
		AcArray<AcDbSubentId>& vertexSubentIds,
		AcArray<AcDbSubentId>& fixedVertexSubentIds);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static bool isInsertionPointBasedEntity(const AcDbObjectId& entityId);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus postToDatabase (
		AcDbEntity* pEntity,  
		AcDbDatabase* pDb = acdbCurDwg(), 
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId()); 

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static void doCleanUp(AcDbObjectIdArray& cleanupObjects);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getLinearEdgeData(
		const AcDbObjectId& entId,  
		const AcGePoint3d& entPt, 
		AcDbFullSubentPath& edgeEntPath, 
		AcGePoint3d& startPoint,
		AcGePoint3d& endPoint);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createAlignedDim(
		const AcGePoint3d& entPt1,
		const AcGePoint3d& entPt2, 
		const AcGePoint3d& dimPos, 
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus create2LinesAngularDim(
		const AcGePoint3d& startPoint1,
		const AcGePoint3d& endPoint1, 
		const AcGePoint3d& startPoint2,
		const AcGePoint3d& endPoint2, 
		const AcGePoint3d& dimPos, 
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createArcAngularDim(
		const AcGePoint3d& centerPoint, 
		const AcGePoint3d& xLine1Point, 
		const AcGePoint3d& xLine2Point, 
		const AcGePoint3d& arcPoint, 
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus create3PointAngularDim(
		const AcGePoint3d& centerPoint, 
		const AcGePoint3d& xLine1Point, 
		const AcGePoint3d& xLine2Point, 
		const AcGePoint3d& arcPoint, 
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createRadialDim(
		const AcDbObjectId& entId,
		const AcGePoint3d& centerPt, 
		const AcGePoint3d& chordPt, 
		const double leaderLength,
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createDiametricDim(
		const AcDbObjectId& entId,
		const AcGePoint3d& chordPt,
		const AcGePoint3d& farChord,
		const AcGePoint3d& dimPos, 
		const double leaderLength,
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createRotatedDim(
		const AcDbObjectId& entId1,
		const AcGePoint3d& entPt1,
		const AcDbFullSubentPath& edgeEntPath1,
		const AcDbObjectId& entId2,
		const AcGePoint3d& entPt2, 
		const AcDbFullSubentPath& edgeEntPath2,
		const AcGePoint3d& dimPos, 
		double rotation,
		AcDbObjectId& dimId,
		const AcDbObjectId& dimStyleId = AcDbObjectId::kNull,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId());

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus getNameAndExpressionFromDimension(
		const AcDbObjectId& networkId,
		const AcDbObjectId& dimId,
		const AcDbAssocConstraintType &constraintType,
		AcString &name,
		AcString &expression);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addNewVariableToAssocNetwork(
		const AcDbObjectId& networkId, 
		const AcString &name,
		const AcString &expression,
		AcDbObjectId& varId);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus addValueDependency(
		const AcDbObjectId& networkId,
		const AcDbObjectId& varId,
		AcDbObjectId& varDepId);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static AcGeMatrix3d AdnAssocSampleUtils::getConstraintGroupCoordSysInv(AcDbAssoc2dConstraintGroup* p2dConstrGrp);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus AdnAssocSampleUtils::getClosestConstrainedPoint(AcConstrainedGeometry*& pConsGeom, 
		const AcGePoint3d& entPtInConstGrp, 
		AcConstrainedPoint*& point);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createDistanceConstraint(
		const AcDbObjectId& varDepId,
		const AcDbObjectId& dimDepId,
		AcConstrainedGeometry*& pConsGeom1,
		const AcGePoint3d& entPt1,
		AcConstrainedGeometry*& pConsGeom2,
		const AcGePoint3d& entPt2,
		const AcGeVector3d* pFixedDirection = NULL,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId(),
		AcDistanceConstraint** ppNewDisConstraint = NULL);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus create2LineAngleConstraint(
		const AcDbObjectId& varDepId,
		const AcDbObjectId& dimDepId,
		AcConstrainedGeometry*& pConsGeom1,
		AcConstrainedGeometry*& pConsGeom2,
		AcAngleConstraint::SectorType sectorType,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId(),
		AcAngleConstraint** ppNewAngConstraint = NULL);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus create3PointAngleConstraint(
		const AcDbObjectId& varDepId,
		const AcDbObjectId& dimDepId,
		AcConstrainedGeometry*& pConsGeom1,
		const AcGePoint3d& entPt1,
		AcConstrainedGeometry*& pConsGeom2,
		const AcGePoint3d& entPt2,
		AcConstrainedGeometry*& pConsGeom3,
		const AcGePoint3d& entPt3,
		AcAngleConstraint::SectorType sectorType,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId(),
		Ac3PointAngleConstraint** ppNewAngConstraint = NULL);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Use: 
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static Acad::ErrorStatus createRadiusDiameterConstraint(
		const AcDbObjectId& varDepId,
		const AcDbObjectId& dimDepId,
		AcConstrainedGeometry*& pConsGeom,
		AcRadiusDiameterConstraint::RadiusDiameterConstrType constrType,
		AcDbDatabase* pDb = acdbCurDwg(),
		const AcDbObjectId& spaceId = acdbCurDwg()->currentSpaceId(),
		AcRadiusDiameterConstraint** ppNewRadDiaConstraint = NULL);
};
